/* 
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]  
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;

using BybitOrderResponse = IO.Swagger.Model.OrderResBase;
using System.Threading.Tasks;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing LinearOrderApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LinearOrderApiTests
    {
        private LinearOrderApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LinearOrderApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LinearOrderApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LinearOrderApi
            //Assert.IsInstanceOfType(typeof(LinearOrderApi), instance, "instance is a LinearOrderApi");
        }

        
        /// <summary>
        /// Test LinearOrderCancel
        /// </summary>
        [Test]
        public void LinearOrderCancelTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderId = null;
            //string orderLinkId = null;
            //string symbol = null;
            //var response = instance.LinearOrderCancel(orderId, orderLinkId, symbol);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test LinearOrderCancelAll
        /// </summary>
        [Test]
        public void LinearOrderCancelAllTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //var response = instance.LinearOrderCancelAll(symbol);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test LinearOrderGetOrders
        /// </summary>
        [Test]
        public void LinearOrderGetOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string orderId = null;
            //string orderLinkId = null;
            //string symbol = null;
            //string order = null;
            //string page = null;
            //string limit = null;
            //string orderStatus = null;
            //var response = instance.LinearOrderGetOrders(orderId, orderLinkId, symbol, order, page, limit, orderStatus);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test LinearOrderNew
        /// </summary>
        [Test]
        public async Task LinearOrderNewTest()
        {
            //TODO uncomment below to test the method and replace null with proper value
            string side = "Buy";
            string symbol = "DOGEUSDT";
            string orderType = "Limit";
            double? qty = 20;
            string timeInForce = "GoodTillCancel";
            double? price = 0.3;
            double? takeProfit = null;
            double? stopLoss = null;
            bool? reduceOnly = false;
            bool? closeOnTrigger = false;
            string orderLinkId = "1212209";
            string tpTriggerBy = null;
            string slTriggerBy = null;

            instance.Configuration.AddApiKey("api_key", "key");
            instance.Configuration.AddApiKey("api_secret", "secret");

            
            var response = await instance.LinearOrderNewAsync(symbol, side, orderType, 
            timeInForce, qty, price, takeProfit, stopLoss, reduceOnly, 
            tpTriggerBy, slTriggerBy, closeOnTrigger, orderLinkId);
            Assert.IsInstanceOf<Object> (response, "response is Object");

            var jobj = (Newtonsoft.Json.Linq.JObject) response;

            var orderResponse = jobj.ToObject<BybitOrderResponse>(); // TODO do both COINM/USDT return the same type?
            Console.Out.WriteLine("Log statement to debug " + orderResponse);
            Assert.AreEqual(0, orderResponse.RetCode);
        }
        
        /// <summary>
        /// Test LinearOrderQuery
        /// </summary>
        [Test]
        public void LinearOrderQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //string orderId = null;
            //string orderLinkId = null;
            //var response = instance.LinearOrderQuery(symbol, orderId, orderLinkId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test LinearOrderReplace
        /// </summary>
        [Test]
        public void LinearOrderReplaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string symbol = null;
            //string orderId = null;
            //string orderLinkId = null;
            //string pRQty = null;
            //decimal? pRPrice = null;
            //var response = instance.LinearOrderReplace(symbol, orderId, orderLinkId, pRQty, pRPrice);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
    }

}
